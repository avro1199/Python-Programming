def resize_image_no_library(input_path, output_path, new_width, new_height):
    with open(input_path, 'rb') as f:
        header = f.readline().decode()  # read the P6 header
        if header.strip() != 'P6':
            raise ValueError("Not a PPM P6 image")
        dimensions = f.readline().decode()  # read the dimensions
        width, height = map(int, dimensions.split())
        max_val = f.readline().decode()  # read the max color value
        if max_val.strip() != '255':
            raise ValueError("Not a standard 8-bit PPM")
        
        # Read the pixel data
        pixel_data = f.read()

    # Simple nearest neighbor scaling (not efficient or high quality)
    new_pixel_data = bytearray(new_width * new_height * 3)
    for y in range(new_height):
        for x in range(new_width):
            old_x = int(x * width / new_width)
            old_y = int(y * height / new_height)
            old_index = (old_y * width + old_x) * 3
            new_index = (y * new_width + x) * 3
            new_pixel_data[new_index:new_index + 3] = pixel_data[old_index:old_index + 3]

    with open(output_path, 'wb') as f:
        f.write(f'P6\n{new_width} {new_height}\n255\n'.encode())
        f.write(new_pixel_data)

# Example usage
resize_image_no_library('input.ppm', 'output.ppm', 800, 600)


def resize_image_no_library(input_path, output_path, new_width, new_height):
    with open(input_path, 'rb') as f:
        header = f.readline().decode()  # read the P6 header
        if header.strip() != 'P6':
            raise ValueError("Not a PPM P6 image")
        dimensions = f.readline().decode()  # read the dimensions
        width, height = map(int, dimensions.split())
        max_val = f.readline().decode()  # read the max color value
        if max_val.strip() != '255':
            raise ValueError("Not a standard 8-bit PPM")
        
        # Read the pixel data
        pixel_data = f.read()

    # Simple nearest neighbor scaling (not efficient or high quality)
    new_pixel_data = bytearray(new_width * new_height * 3)
    for y in range(new_height):
        for x in range(new_width):
            old_x = int(x * width / new_width)
            old_y = int(y * height / new_height)
            old_index = (old_y * width + old_x) * 3
            new_index = (y * new_width + x) * 3
            new_pixel_data[new_index:new_index + 3] = pixel_data[old_index:old_index + 3]

    with open(output_path, 'wb') as f:
        f.write(f'P6\n{new_width} {new_height}\n255\n'.encode())
        f.write(new_pixel_data)

# Example usage
resize_image_no_library('input.ppm', 'output.ppm', 800, 600)
