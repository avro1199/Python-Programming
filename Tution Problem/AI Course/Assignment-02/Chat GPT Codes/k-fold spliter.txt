import numpy as np

def k_fold_split(X, Y, k=2, randomize=False):
    """
    Split the data into k parts for k-fold validation.

    Parameters:
    - X: np.ndarray, feature matrix of the dataset.
    - Y: np.ndarray, target labels of the dataset.
    - k: int, number of folds. Default is 2.
    - randomize: bool, whether to shuffle the data before splitting. Default is False.

    Returns:
    - folds: list of tuples, each tuple contains (X_fold, Y_fold) for one of the k parts.
    """
    # Ensure the data is randomly shuffled if randomize is True
    if randomize:
        indices = np.arange(X.shape[0])
        np.random.shuffle(indices)
        X = X[indices]
        Y = Y[indices]

    # Calculate the number of samples in each fold
    fold_size = X.shape[0] // k
    folds = []

    for i in range(k):
        start = i * fold_size
        end = (i + 1) * fold_size if i != k - 1 else X.shape[0]
        X_fold = X[start:end]
        Y_fold = Y[start:end]
        folds.append((X_fold, Y_fold))

    return folds

# Example usage:
# X = np.random.rand(100, 5)  # 100 samples, 5 features each
# Y = np.random.randint(0, 2, 100)  # 100 samples, binary target
# folds = k_fold_split(X, Y, k=5, randomize=True)
# for i, (X_fold, Y_fold) in enumerate(folds):
#     print(f"Fold {i + 1}:")
#     print("X_fold:\n", X_fold)
#     print("Y_fold:\n", Y_fold)
