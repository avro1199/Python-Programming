import numpy as np

def k_fold_validation(model, data, target, k=5):
    '''
    Perform k-fold cross-validation on the given model using the provided data and target.

    Inputs:
        - model: a machine learning model instance that has fit and predict methods
        - data: np.ndarray of shape (n_samples, n_features) representing the dataset
        - target: np.ndarray of shape (n_samples,) representing the target values
        - k: int, number of folds for cross-validation

    Outputs:
        - results: a dictionary containing the train and test scores for each fold
    '''
    n_samples = data.shape[0]
    indices = np.arange(n_samples)
    np.random.seed(42)
    np.random.shuffle(indices)
    fold_sizes = np.full(k, n_samples // k, dtype=int)
    fold_sizes[:n_samples % k] += 1

    current = 0
    results = {'train_scores': [], 'test_scores': []}

    for fold_size in fold_sizes:
        start, stop = current, current + fold_size
        test_index = indices[start:stop]
        train_index = np.concatenate([indices[:start], indices[stop:]])

        train_data, test_data = data[train_index], data[test_index]
        train_target, test_target = target[train_index], target[test_index]

        model.fit(train_data, train_target)
        train_score = model.score(train_data, train_target)
        test_score = model.score(test_data, test_target)

        results['train_scores'].append(train_score)
        results['test_scores'].append(test_score)

        current = stop

    return results

# Example usage with a simple model
from sklearn.linear_model import LogisticRegression

# Generating some synthetic data for the example
np.random.seed(42)
data = np.random.randn(100, 10)
target = np.random.randint(0, 2, 100)

model = LogisticRegression()

# Perform k-fold validation
results = k_fold_validation(model, data, target, k=5)

print("Train scores for each fold:", results['train_scores'])
print("Test scores for each fold:", results['test_scores'])
print("Average train score:", np.mean(results['train_scores']))
print("Average test score:", np.mean(results['test_scores']))
